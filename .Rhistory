for (nm in names(my_list)) {
my_list[[nm]]$value <- nm
}
my_list_summarised <- lapply(my_list, FUN = function(x){
x %>% dplyr::mutate(value = as.numeric(value)) %>% group_by(aspect) %>% summarise(range = mean(value), acres = sum(acres), coiids = toString(coiid)) %>% ungroup()
})
aspect_r_acres <- do.call(rbind, my_list_summarised)
aspect_r_acres_prepped <- data.frame(aspect = my_seq, row.names = NULL) %>% dplyr::rename(range = aspect) %>%
dplyr::left_join(aspect_r_acres)
aspect_r_acres_prepped$acres <- ifelse(is.na(aspect_r_acres_prepped$acres), 0, aspect_r_acres_prepped$acres)
aspect_r_acres_prepped$range <- aspect_r_acres_prepped$range + 0.1
expand_aspect_r <- aspect_r_acres_prepped[rep(1:nrow(aspect_r_acres_prepped), times = aspect_r_acres_prepped$acres), c("range", "aspect", "coiids"), drop = FALSE]
# Create acreage histogram
aspect_r2 <- ggplot(expand_aspect_r, aes(x = range)) + geom_histogram(aes(text = paste("coiid(s):", stringr::str_wrap(coiids, 40))),
binwidth = bin_width,
center = round_any(min(EDIT_updates_filtered$aspect_l), round_by, f = floor) + bin_width/2,
color = "black",
fill = "grey") +
#theme_minimal() +
ggtitle("Aspect") + theme(plot.title = element_text(hjust = 0.5)) +
ylab("# of acres") + xlab("Aspect (degrees)") +
scale_x_continuous(limits = c(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling)),
n.breaks = length(seq(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling), round_by)))
# Convert to plotly
aspect_r2 <- ggplotly(aspect_r2, tooltip = "text")
# Join both figures
manipulateWidget::combineWidgets(aspect_r1,
aspect_r2,
nrow = 1,
ncol = 2,
colsize = c(1, 1))
}
# Is variable NA?
if (all(is.na(EDIT_updates_filtered$aspect_rep))) {print("No data populated in NASIS for this field.")
} else{
# Define bin width and round by measures
bin_width <- 30
round_by <- 30
# Prepare dataframe for component histogram
aspect.df <-
EDIT_updates_filtered %>% select(coiid, aspect_rep, comp_acres) %>%
tidyr::pivot_longer(
names_to = "aspect",
values_to = "value",
cols = c("aspect_rep")) %>%
dplyr::rename(acres = comp_acres)
# Create component histogram
aspect_r1 <- ggplot(aspect.df %>% filter(aspect == "aspect_rep"), aes(x = value)) + geom_histogram(aes(text = paste("coiid(s):", coiid)),
binwidth = bin_width,
center = round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor) + bin_width/2,
color = "black",
fill = "grey") +
#theme_minimal() +
ggtitle("Aspect") + theme(plot.title = element_text(hjust = 0.5)) +
ylab("# of components") + xlab("Aspect (degrees)") +
scale_x_continuous(limits = c(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling)),
n.breaks = length(seq(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling), round_by)))
# Convert histogram to plotly
aspect_r1 <- ggplotly(aspect_r1, tooltip = "text")
# Manipulate to create acreage histogram
my_list <- list()
my_seq <- seq(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling), bin_width)
names(my_seq) <- my_seq
aspect.df.acres <- aspect.df
aspect.df.acres$value <- ifelse(aspect.df.acres$value == 0, aspect.df.acres$value + 0.1, aspect.df.acres$value)
for(i in names(my_seq)){
my_list[[i]] <- aspect.df.acres %>% filter(aspect == "aspect_rep") %>% filter(value > as.numeric(i) & value < as.numeric(i) + bin_width + 0.1)
}
for (nm in names(my_list)) {
my_list[[nm]]$value <- nm
}
my_list_summarised <- lapply(my_list, FUN = function(x){
x %>% dplyr::mutate(value = as.numeric(value)) %>% group_by(aspect) %>% summarise(range = mean(value), acres = sum(acres), coiids = toString(coiid)) %>% ungroup()
})
aspect_r_acres <- do.call(rbind, my_list_summarised)
aspect_r_acres_prepped <- data.frame(aspect = my_seq, row.names = NULL) %>% dplyr::rename(range = aspect) %>%
dplyr::left_join(aspect_r_acres)
aspect_r_acres_prepped$acres <- ifelse(is.na(aspect_r_acres_prepped$acres), 0, aspect_r_acres_prepped$acres)
aspect_r_acres_prepped$range <- aspect_r_acres_prepped$range + 0.1
expand_aspect_r <- aspect_r_acres_prepped[rep(1:nrow(aspect_r_acres_prepped), times = aspect_r_acres_prepped$acres), c("range", "aspect", "coiids"), drop = FALSE]
# Create acreage histogram
aspect_r2 <- ggplot(expand_aspect_r, aes(x = range)) + geom_histogram(aes(text = paste("coiid(s):", stringr::str_wrap(coiids, 40))),
binwidth = bin_width,
center = round_any(min(EDIT_updates_filtered$aspect_l), round_by, f = floor) + bin_width/2,
color = "black",
fill = "grey") +
#theme_minimal() +
ggtitle("Aspect") + theme(plot.title = element_text(hjust = 0.5)) +
ylab("# of acres") + xlab("Aspect (degrees)") +
scale_x_continuous(limits = c(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling)),
n.breaks = length(seq(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling), round_by)))
# Convert to plotly
aspect_r2 <- ggplotly(aspect_r2, tooltip = "text")
# Join both figures
manipulateWidget::combineWidgets(aspect_r1,
aspect_r2,
nrow = 1,
ncol = 2,
colsize = c(1, 1))
}
aspect_r2
expand_aspect_r
aspect_r2 <- ggplot(expand_aspect_r, aes(x = range)) + geom_histogram(aes(text = paste("coiid(s):", stringr::str_wrap(coiids, 40))),
binwidth = bin_width,
center = round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor) + bin_width/2,
color = "black",
fill = "grey") +
#theme_minimal() +
ggtitle("Aspect") + theme(plot.title = element_text(hjust = 0.5)) +
ylab("# of acres") + xlab("Aspect (degrees)") +
scale_x_continuous(limits = c(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling)),
n.breaks = length(seq(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling), round_by)))
aspect_r2 <- ggplotly(aspect_r2, tooltip = "text")
manipulateWidget::combineWidgets(aspect_r1,
aspect_r2,
nrow = 1,
ncol = 2,
colsize = c(1, 1))
c(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling))
length(seq(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor)
)
)
length(seq(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling), round_by))
seq(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling), round_by)
aspect_r2 <- ggplot(expand_aspect_r, aes(x = range)) + geom_histogram(aes(text = paste("coiid(s):", stringr::str_wrap(coiids, 40))),
binwidth = bin_width,
center = round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor) + bin_width/2,
color = "black",
fill = "grey") +
#theme_minimal() +
ggtitle("Aspect") + theme(plot.title = element_text(hjust = 0.5)) +
ylab("# of acres") + xlab("Aspect (degrees)") +
scale_x_continuous(limits = c(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling)),
n.breaks = length(seq(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling), round_by)) -1)
aspect_r2 <- ggplotly(aspect_r2, tooltip = "text")
manipulateWidget::combineWidgets(aspect_r1,
aspect_r2,
nrow = 1,
ncol = 2,
colsize = c(1, 1))
aspect_r2 <- ggplot(expand_aspect_r, aes(x = range)) + geom_histogram(aes(text = paste("coiid(s):", stringr::str_wrap(coiids, 40))),
binwidth = bin_width,
center = round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor) + bin_width/2,
color = "black",
fill = "grey") +
#theme_minimal() +
ggtitle("Aspect") + theme(plot.title = element_text(hjust = 0.5)) +
ylab("# of acres") + xlab("Aspect (degrees)") +
scale_x_continuous(limits = c(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling)),
n.breaks = length(seq(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling), round_by)) -2)
aspect_r2 <- ggplotly(aspect_r2, tooltip = "text")
manipulateWidget::combineWidgets(aspect_r1,
aspect_r2,
nrow = 1,
ncol = 2,
colsize = c(1, 1))
aspect_r2 <- ggplot(expand_aspect_r, aes(x = range)) + geom_histogram(aes(text = paste("coiid(s):", stringr::str_wrap(coiids, 40))),
binwidth = bin_width,
center = round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor) + bin_width/2,
color = "black",
fill = "grey") +
#theme_minimal() +
ggtitle("Aspect") + theme(plot.title = element_text(hjust = 0.5)) +
ylab("# of acres") + xlab("Aspect (degrees)") +
scale_x_continuous(limits = c(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling)),
n.breaks = length(seq(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling), round_by)) -2)
aspect_r2 <- ggplotly(aspect_r2, tooltip = "text")
manipulateWidget::combineWidgets(aspect_r1,
aspect_r2,
nrow = 1,
ncol = 2,
colsize = c(1, 1))
length(seq(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling), round_by))
manipulateWidget::combineWidgets(aspect_r1,
aspect_r2,
nrow = 1,
ncol = 2,
colsize = c(1, 1))
round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor) + bin_width/2
c(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling))
aspect_r2 <- ggplot(expand_aspect_r, aes(x = range)) + geom_histogram(aes(text = paste("coiid(s):", stringr::str_wrap(coiids, 40))),
binwidth = bin_width,
center = round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor) + bin_width/2,
color = "black",
fill = "grey") +
#theme_minimal() +
ggtitle("Aspect") + theme(plot.title = element_text(hjust = 0.5)) +
ylab("# of acres") + xlab("Aspect (degrees)") +
scale_x_continuous(limits = c(0, 360),
n.breaks = length(seq(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling), round_by)) -2)
aspect_r2
aspect_r2 <- ggplot(expand_aspect_r, aes(x = range)) + geom_histogram(aes(text = paste("coiid(s):", stringr::str_wrap(coiids, 40))),
binwidth = bin_width,
center = round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor) + bin_width/2,
color = "black",
fill = "grey") +
#theme_minimal() +
ggtitle("Aspect") + theme(plot.title = element_text(hjust = 0.5)) +
ylab("# of acres") + xlab("Aspect (degrees)") +
scale_x_continuous(limits = c(0, 360),
n.breaks = 12)
aspect_r2
aspect_r2 <- ggplot(expand_aspect_r, aes(x = range)) + geom_histogram(aes(text = paste("coiid(s):", stringr::str_wrap(coiids, 40))),
binwidth = bin_width,
center = round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor) + bin_width/2,
color = "black",
fill = "grey") +
#theme_minimal() +
ggtitle("Aspect") + theme(plot.title = element_text(hjust = 0.5)) +
ylab("# of acres") + xlab("Aspect (degrees)") +
scale_x_continuous(limits = c(0, 360),
n.breaks = 13)
aspect_r2
aspect_r2 <- ggplot(expand_aspect_r, aes(x = range)) + geom_histogram(aes(text = paste("coiid(s):", stringr::str_wrap(coiids, 40))),
binwidth = bin_width,
center = round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor) + bin_width/2,
color = "black",
fill = "grey") +
#theme_minimal() +
ggtitle("Aspect") + theme(plot.title = element_text(hjust = 0.5)) +
ylab("# of acres") + xlab("Aspect (degrees)") +
scale_x_continuous(limits = c(0, 360),
breaks = seq(0,360, 30))
aspect_r2
# Is variable NA?
if (all(is.na(EDIT_updates_filtered$aspect_rep))) {print("No data populated in NASIS for this field.")
} else{
# Define bin width and round by measures
bin_width <- 30
round_by <- 30
# Prepare dataframe for component histogram
aspect.df <-
EDIT_updates_filtered %>% select(coiid, aspect_rep, comp_acres) %>%
tidyr::pivot_longer(
names_to = "aspect",
values_to = "value",
cols = c("aspect_rep")) %>%
dplyr::rename(acres = comp_acres)
# Create component histogram
aspect_r1 <- ggplot(aspect.df %>% filter(aspect == "aspect_rep"), aes(x = value)) + geom_histogram(aes(text = paste("coiid(s):", coiid)),
binwidth = bin_width,
center = round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor) + bin_width/2,
color = "black",
fill = "grey") +
#theme_minimal() +
ggtitle("Aspect") + theme(plot.title = element_text(hjust = 0.5)) +
ylab("# of components") + xlab("Aspect (degrees)") +
scale_x_continuous(limits = c(0, 360),
breaks = seq(0,360, 30))
# Convert histogram to plotly
aspect_r1 <- ggplotly(aspect_r1, tooltip = "text")
# Manipulate to create acreage histogram
my_list <- list()
my_seq <- seq(round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor),
round_any(max(EDIT_updates_filtered$aspect_rep), round_by, f = ceiling), bin_width)
names(my_seq) <- my_seq
aspect.df.acres <- aspect.df
aspect.df.acres$value <- ifelse(aspect.df.acres$value == 0, aspect.df.acres$value + 0.1, aspect.df.acres$value)
for(i in names(my_seq)){
my_list[[i]] <- aspect.df.acres %>% filter(aspect == "aspect_rep") %>% filter(value > as.numeric(i) & value < as.numeric(i) + bin_width + 0.1)
}
for (nm in names(my_list)) {
my_list[[nm]]$value <- nm
}
my_list_summarised <- lapply(my_list, FUN = function(x){
x %>% dplyr::mutate(value = as.numeric(value)) %>% group_by(aspect) %>% summarise(range = mean(value), acres = sum(acres), coiids = toString(coiid)) %>% ungroup()
})
aspect_r_acres <- do.call(rbind, my_list_summarised)
aspect_r_acres_prepped <- data.frame(aspect = my_seq, row.names = NULL) %>% dplyr::rename(range = aspect) %>%
dplyr::left_join(aspect_r_acres)
aspect_r_acres_prepped$acres <- ifelse(is.na(aspect_r_acres_prepped$acres), 0, aspect_r_acres_prepped$acres)
aspect_r_acres_prepped$range <- aspect_r_acres_prepped$range + 0.1
expand_aspect_r <- aspect_r_acres_prepped[rep(1:nrow(aspect_r_acres_prepped), times = aspect_r_acres_prepped$acres), c("range", "aspect", "coiids"), drop = FALSE]
# Create acreage histogram
aspect_r2 <- ggplot(expand_aspect_r, aes(x = range)) + geom_histogram(aes(text = paste("coiid(s):", stringr::str_wrap(coiids, 40))),
binwidth = bin_width,
center = round_any(min(EDIT_updates_filtered$aspect_rep), round_by, f = floor) + bin_width/2,
color = "black",
fill = "grey") +
#theme_minimal() +
ggtitle("Aspect") + theme(plot.title = element_text(hjust = 0.5)) +
ylab("# of acres") + xlab("Aspect (degrees)") +
scale_x_continuous(limits = c(0, 360),
breaks = seq(0,360, 30))
# Convert to plotly
aspect_r2 <- ggplotly(aspect_r2, tooltip = "text")
# Join both figures
manipulateWidget::combineWidgets(aspect_r1,
aspect_r2,
nrow = 1,
ncol = 2,
colsize = c(1, 1))
}
manipulateWidget::combineWidgets(aspect_r1,
aspect_r2,
nrow = 1,
ncol = 2,
colsize = c(1, 1))
manipulateWidget::combineWidgets(aspect_r1,
aspect_r2,
nrow = 1,
ncol = 2,
colsize = c(1, 1))
if (all(is.na(EDIT_updates_filtered$surf_texture))) {print("No data populated in NASIS for this field.")
} else{
EDIT_updates_filtered %>% select(coiid, surf_texture, comp_acres) %>% group_by(surf_texture) %>%
summarise(acres = sum(comp_acres),  '# components' = n()) %>% arrange(desc(acres)) %>% as.data.frame()
}
if (all(is.na(EDIT_updates_filtered$surf_texture))) {print("No data populated in NASIS for this field.")
} else{
EDIT_updates_filtered %>% select(coiid, surf_texture, comp_acres) %>% group_by(surf_texture) %>%
summarise(acres = sum(comp_acres),  '# components' = n()) %>% arrange(desc(acres)) %>% as.data.frame()
}
drainage_class_df <- EDIT_updates_filtered %>% select(coiid, drainage_class, comp_acres)  %>% group_by(drainage_class) %>% summarise(count = n(), acres = sum(comp_acres), coiids = toString(coiid)) %>% ungroup()
if (all(is.na(EDIT_updates_filtered$drainage_class))) {print("No data populated in NASIS for this field.")
} else{
drainage_class_df <- EDIT_updates_filtered %>% select(coiid, drainage_class, comp_acres)  %>% group_by(drainage_class) %>% summarise(count = n(), acres = sum(comp_acres), coiids = toString(coiid)) %>% ungroup()
drain1 <-
plot_ly(
x = drainage_class_df$drainage_class,
y = drainage_class_df$count,
type = "bar",
hoverinfo = "text",
hovertext = paste("coiids: ", stringr::str_wrap(drainage_class_df$coiids, 40))
) %>% layout(
title = "Drainage class (# components)",
xaxis = list(title = "Drainage class"),
yaxis = list(title = "# of components"),
margin = list(t = 100)
)
drain2 <-
plot_ly(
x = drainage_class_df$drainage_class,
y = drainage_class_df$acres,
name = "Drainage class (acres)",
type = "bar",
hoverinfo = "text",
hovertext = paste("coiids: ", stringr::str_wrap(drainage_class_df$coiids, 40))
) %>% layout(
title = "Drainage class (# of acres)",
xaxis = list(title = "Flooding frequency"),
yaxis = list(title = "# of acres"),
margin = list(t = 100)
)
manipulateWidget::combineWidgets(drain1,
drain2,
nrow = 1,
ncol = 2,
colsize = c(1, 1))
}
if (all(is.na(EDIT_updates_filtered$drainage_class))) {print("No data populated in NASIS for this field.")
} else{
EDIT_updates_filtered %>% select(coiid, drainage_class, comp_acres) %>% group_by(drainage_class) %>%
summarise(acres = sum(comp_acres),  '# components' = n()) %>% arrange(desc(acres)) %>% as.data.frame()
}
expanded_drainage_class <- rep(EDIT_updates_filtered$drainage_class, EDIT_updates_filtered$comp_acres)
expanded_drainage_class
?sort
expanded_drainage_class <- as.factor(expanded_drainage_class)
?as.factor
EDIT_updates_filtered$drainage_class
unique(EDIT_updates_filtered$drainage_class)
unique(EDIT_updates$drainage_class)
expanded_drainage_class <- as.factor(expanded_drainage_class, levels = c("subaqueous", "very poorly", "poorly",
"somewhat poorly", "moderately well",
"well", "somewhat excessively",
"excessively"))
source("~/.active-rstudio-document", echo=TRUE)
my_levels <- my_levels[my_levels %in% unique(EDIT_updates_filtered$drainage_class)]
my_levels <-  c(
"subaqueous",
"very poorly",
"poorly",
"somewhat poorly",
"moderately well",
"well",
"somewhat excessively",
"excessively"
)
my_levels <- my_levels[my_levels %in% unique(EDIT_updates_filtered$drainage_class)]
my_levels
expanded_drainage_class <- as.factor(expanded_drainage_class, levels = my_levels)
expanded_drainage_class <- rep(EDIT_updates_filtered$drainage_class, EDIT_updates_filtered$comp_acres)
class(expanded_drainage_class)
expanded_drainage_class[order(match(expanded_drainage_class, my_levels))]
data.frame("25%" = expanded_drainage_class[ceiling(0.25 * length(expanded_drainage_class))],
"75%" = expanded_drainage_class[ceiling(0.75 * length(expanded_drainage_class))],
check.names = FALSE)
data.frame("5%" = expanded_drainage_class[ceiling(0.05 * length(expanded_drainage_class))],
"95%" = expanded_drainage_class[ceiling(0.95 * length(expanded_drainage_class))],
check.names = FALSE)
if (all(is.na(EDIT_updates_filtered$slope_h))) {print("No data populated in NASIS for this field.")
} else{
slope_h_stats <-slope.df %>% dplyr::filter(slope == "slope_h")
slope_h_stats_rep <- rep(slope_h_stats$value, slope_h_stats$acres)
summary(slope_h_stats_rep)
}
if (all(is.na(EDIT_updates_filtered$slope_l))) {print("No data populated in NASIS for this field.")
} else{
slope_l_stats <- slope.df %>% dplyr::filter(slope == "slope_l")
slope_l_stats_rep <- rep(slope_l_stats$value, slope_l_stats$acres)
slope_l_stats_rep %>% quantile(probs = c(0.05))
}
if (all(is.na(EDIT_updates_filtered$slope_l))) {print("No data populated in NASIS for this field.")
} else{
slope_l_stats <- slope.df %>% dplyr::filter(slope == "slope_l")
slope_l_stats_rep <- rep(slope_l_stats$value, slope_l_stats$acres)
summary(slope_l_stats_rep)
}
EDIT_updates_filtered$slope_h
max(EDIT_updates_filtered$slope_h)
if (all(is.na(EDIT_updates_filtered$parent_material))) {print("No data populated in NASIS for this field.")
} else{
EDIT_updates_filtered %>% select(coiid, parent_material, comp_acres) %>% group_by(parent_material) %>%
summarise(acres = sum(comp_acres),  '# components' = n()) %>% arrange(desc(acres)) %>% as.data.frame()
}
EDIT_updates_filtered %>% select(coiid, parent_material, comp_acres) %>% group_by(parent_material) %>%
summarise(acres = sum(comp_acres),  '# components' = n()) %>% arrange(desc(acres)) %>% as.data.frame() %>%
strwrap(parent_material)
if (all(is.na(EDIT_updates_filtered$parent_material))) {print("No data populated in NASIS for this field.")
} else{
EDIT_updates_filtered %>% select(coiid, parent_material, comp_acres) %>% group_by(parent_material) %>%
summarise(acres = sum(comp_acres),  '# components' = n()) %>% arrange(desc(acres)) %>% as.data.frame() %>%
strwrap(parent_material)
}
EDIT_updates_filtered %>% select(coiid, parent_material, comp_acres) %>% group_by(parent_material) %>%
summarise(acres = sum(comp_acres),  '# components' = n()) %>% arrange(desc(acres)) %>% as.data.frame() %>%
stringr::str_wrap(parent_material)
EDIT_updates_filtered %>% select(coiid, parent_material, comp_acres) %>% group_by(parent_material) %>%
summarise(acres = sum(comp_acres),  '# components' = n()) %>% arrange(desc(acres)) %>% as.data.frame() %>%
stringr::str_wrap(EDIT_updates_filtered$parent_material, 40)
test <- EDIT_updates_filtered %>% select(coiid, parent_material, comp_acres) %>% group_by(parent_material) %>%
summarise(acres = sum(comp_acres),  '# components' = n()) %>% arrange(desc(acres)) %>% as.data.frame()
library(kable)
library(knitr)
knitr::kable(test)
install.packages("bookdown")
p <-
c(
"area",
"legend",
"mapunit",
"datamapunit",
"component",
"metadata",
"lookup",
"nasis",
"transect",
"site",
"pedon",
"vegetation"
)
soilDB::createStaticNASIS(
SS = TRUE,
tables = c(
soilDB::get_NASIS_table_name_by_purpose(p),
soilDB::get_NASIS_table_name_by_purpose(p, SS = TRUE)
),
output_path = "C:/Users/Nathan.Roe/Documents/ESS-FAQ/SQlite_tables/componentsSSA792.sqlite"
)
p <-
c(
"area",
"legend",
"mapunit",
"datamapunit",
"component",
"metadata",
"lookup",
"nasis",
"transect",
"site",
"pedon",
"vegetation"
)
soilDB::createStaticNASIS(
SS = TRUE,
tables = c(
soilDB::get_NASIS_table_name_by_purpose(p),
soilDB::get_NASIS_table_name_by_purpose(p, SS = TRUE)
),
output_path = "C:/Users/Nathan.Roe/Documents/SEKI/vegplotdata.sqlite"
)
install.packages("mapview")
?fetchNASIS
my.components.SSA <- fetchNASIS(from = "components", duplicates = TRUE)
library(soilDB)
my.components.SSA <- fetchNASIS(from = "components", duplicates = TRUE)
my.components.SSA$mukey %>% paste(collapse = ", ")
library(dplyr)
my.components.SSA$mukey %>% paste(collapse = ", ")
